input {
    tcp {
        port => 5000
    }
}

## Add your filters / logstash plugins configuration here
output {
    # stdout { codec => json }
    elasticsearch {
    	hosts => "elasticsearch:9200"
    }
}

filter {
    mutate { replace => { "type" => "cassandralog" } }
    if [type] == "cassandralog" {
        grok {

            patterns_dir => ["/etc/logstash/patterns"]
            # patterns_dir => ["./logstash/patterns"]
            break_on_match => true
            match => {
                "message" => [
                    "%{CASS_COMPACTION_LARGE_KEY}",
                    "%{CASS_SLAB_POOL_CLEANER_1}",
                    "%{CASS_SLAB_POOL_CLEANER_2}",
                    # "%{CASS_MEMTABLE_FLUSH_START}",
                    # "%{CASS_MEMTABLE_FLUSH_COMPLETE}",
                    "%{CASS_FLUSH_TABLE_STATS}",
                    "%{CASS_BATCH_STATEMENT}",
                    "%{CASS_SIMS_TOMBSTONE}",
                    "%{CASS_COMPACTION_COMPLETE}",
                    "%{CASS_GC_GRACE}",
                    "%{CASS_AUDIT_STATEMENT}",
                    "%{CASS_SERVICE_THREAD_PENDING}"
                    ]
            }
            add_tag => [ "cass_parsed" ]
        }

        if "cass_parsed" not in [tags] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                # patterns_dir => ["./logstash/patterns"]
                match => { "message" => ["%{CASS_DEFAULT}"] }
                add_tag => [ "cass_default" ]
            }

        }

        if [fields][timezone] == "pst" {
            ## date is PST just parse it correctly
            date {
                locale => "en"
                match => ["timestamp", "YYYY-MM-dd HH:mm:ss,SSS"] # 2016-08-16 04:13:05,063
                timezone => "America/Los_Angeles"
                target => "@timestamp"
                remove_field => "timestamp"
                # add_field => { "debug" => "tsMatched"}
            }
        } else if [fields][timezone] == "est" {
            ## date is EST
            date {
                locale => "en"
                match => ["timestamp", "YYYY-MM-dd HH:mm:ss,SSS"] # 2016-08-16 04:13:05,063
                timezone => "America/New_York"
                target => "@timestamp"
                remove_field => "timestamp"
                # add_field => { "debug" => "tsMatched"}
            }
        } else {
            ## date is UTC just parse it correctly
            date {
                locale => "en"
                match => ["timestamp", "YYYY-MM-dd HH:mm:ss,SSS"] # 2016-08-16 04:13:05,063
                timezone => "Etc/UTC"
                target => "@timestamp"
                remove_field => "timestamp"
                # add_field => { "debug" => "tsMatched"}
            }
        }

        mutate {
            convert => {
                "line_number" => "integer"
                "threadId" => "integer"
                "bytes_in" => "integer"
                "bytes_out" => "integer"
                "time_ms" => "integer"
                "bytes_onheap" => "integer"
                "bytes_offheap" => "integer"
                "commitlog_pos" => "integer"
                "eden_orig_bytes" => "integer"
                "eden_new_bytes" => "integer"
                "oldgen_orig_bytes" => "integer"
                "oldgen_new_bytes" => "integer"
                "survivor_new_bytes" => "integer"
                "survivor_orig_bytes" => "integer"
                "commitlog_segid" => "integer"
                "ops" => "integer"
                "pkeys_in" => "integer"
                "pkeys_out" => "integer"
                "percent_of_orig" => "integer"
                "cache_size" => "integer"
                "cache_used" => "integer"

                "threads_active" => "integer"
                "threads_pending" => "integer"
                "threads_blocked" => "integer"
                "threads_completed" => "integer"
                "threads_all_time_blocked" => "integer"

                "size_kb" => "float"
                "size_mb" => "float"
                "total_onheap" => "float"
                "total_offheap" => "float"
                "live_onheap" => "float"
                "live_offheap" => "float"
                "flushing_onheap" => "float"
                "flushing_offheap" => "float"
                "this_onheap" => "float"
                "this_offheap" => "float"
                "percent_onheap" => "float"
                "percent_offheap" => "float"
                "speed_mb" => "float"
            }
        }

        if [msg] {
            mutate {
                replace => [ "message", "%{msg}" ]
                remove_field => "msg"
            }
        }

    }
}